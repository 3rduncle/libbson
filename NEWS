Libbson 0.2.4
=============

This release includes some more performance improvements and bug fixes.

It contains an important fix for dealing with invalid string lengths that could
cause an integer overflow when checking to see if the string length fits within
the end of the buffer.

There is preliminary support for Solaris on x86_64 and SPARC.

Generating OIDs is now simpler with the use of bson_context_get_default(). This
function will return a thread-safe generic bson_context_t implementation.
Alternatively, you may pass NULL to bson_oid_init() for the context and the
default context is automatically used.

The fuzz tests now use srand() with a 32-bit integer derived from /dev/urandom.

Endianess conversions are now performed by __builtin_bswap*() functions when
available with the GCC compiler.

Endianness conversions for the double type are now properly handled on
big-endian systems.

bson_reinit() has been added to cleanup code that needs to destroy and then
initialize a bson_t.

Validation of Code with Scope fields was absent from bson_validate(). This is
now supported.

Libbson 0.2.2
=============

This release includes a few performance improvements and bug fixes.

The bson_t structure is more efficient when growing allocated buffers.
The use of memalign() was unnecessary for allocated bson_t structures
and has therefore been removed. Performance sensitive allocations now
use bson_malloc() instead of calloc() and initialize fields directly.
Stack alignment of bson_t is now enforced through compiler intrinsics.

The unit tests can now support running inside of valgrind to check for
various memory leaks. Simply defing VALGRIND=valgrind when running
`make test`.

Enjoy libbson-0.2.2!


Libbson 0.2.0
=============

This is the initial release of Libbson. It has not yet reached API and ABI
maturity and is therefore subject to change without notice.  Developers are
encouraged to start using Libbson as we journey on the road to 1.0, where ABI
stability will be guaranteed.

Libbson is Apache 2.0 licensed so that it can be embedded in a multitude of
scenarios. This means that we try hard to not rely on external libraries.
Therefore, Libbson contains useful routines to help in portability as well
as BSON support.

Libbson is the basis of a new MongoDB C driver that will follow shortly.

Please see the doc/ directory for documentation on how to use Libbson. We
would love for you to contribute to Libbson, whether that is code,
documentation or packaging.

You can contact Libbson's author, Christian Hergert at
christian.hergert@mongodb.com if you have questions about using Libbson.
